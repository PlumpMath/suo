@*   Using Emacs as a display server

As an intermediate step towards connecting to a X server and doing all
user interaction using the X protocol, we connect to Emacs and speak a
specialized high-level UI protocol.

=
(directory /emacs)
(open /base)

-
(define pending-events '())

(define emacs-fd -1)
(define emacs-port #f)
(define emacs-protocol-error-handler #f)

(define (with-emacs-connection proc)
  (if emacs-port
      (sys:close emacs-fd))
  (set! emacs-fd (sys:connect "localhost" 7000))
  (if (< emacs-fd 0)
      (error "can't connect " (- emacs-fd)))
  (set! emacs-port (make-sys-port emacs-fd))
  (catch-protect
   (lambda (throw)
     (set! emacs-protocol-error-handler throw)
     (with-error-handler throw proc))
   (lambda ()
     (sys:close emacs-fd)
     (set! emacs-port #f))
   (lambda (msg rest)
     (apply error msg rest))))

(define (read-one)
  (let ((form (read emacs-port)))
    (if (eof-object? form)
	(error "server connection broken"))
    (cond ((and (pair? form) (eq? (car form) 'event))
	   (set! pending-events (append pending-events (list (cdr form))))
	   #f)
	  (else
	   form))))

(define (read-response)
  (or (read-one)
      (read-response)))

(define (do-request req)
  (call-p current-output-port emacs-port
	  (lambda ()
	    (write req)
	    (newline)))
  (let ((res (read-response)))
    (if (and (pair? res) (eq? (car res) 'error))
	(error res)
	res)))

(define (get-event)
  (if (null? pending-events)
      (let ((res (read-one)))
	(if res
	    (begin
	      (display ";; unexpected response ")
	      (write res)
	      (newline)))
	(get-event))
      (let ((ev (car pending-events)))
	(set! pending-events (cdr pending-events))
	ev)))

(define event-handlers (make-hash-table 31))

(define (register-handler id tag handler)
  (hash-set! event-handlers (list id tag) handler))

(define (handle-event ev)
  (pk ev)
  (let ((handler (hash-ref event-handlers ev)))
    (if handler
	(handler)
	(let ((handler (hash-ref event-handlers (car ev))))
	  (if handler
	      (handler (cadr ev)))))))

(define (destroy id)
  (do-request `(destroy ,id)))

(define (create-buffer name)
  (do-request `(create-buffer ,name)))

(define (show-buffer buffer)
  (do-request `(show-buffer ,buffer)))

(define (create-segment buffer pos props)
  (do-request `(create-segment ,buffer ,pos ,props)))

(define (hide-segment seg)
  (do-request `(hide-segment ,seg)))

(define (show-segment seg)
  (do-request `(show-segment ,seg)))

(define (goto-segment seg)
  (do-request `(goto-segment ,seg)))

(define (set-text segment text)
  (do-request `(set-text ,segment ,text)))

(define (append-text segment text)
  (do-request `(append-text ,segment ,text)))

(define (clear-dirty segment)
  (do-request `(clear-dirty ,segment)))

(define (get-text segment)
  (do-request `(get-text ,segment)))

(define (define-key segment key handler)
  (do-request `(define-key ,segment ,key))
  (register-handler segment key handler))

(define (make-segment-port buffer pos)
  (let ((output (create-segment buffer pos
				'(read-only t
					    face (:background "grey90"))))
	(output-newline-pending #f)
	(input (create-segment buffer (1+ pos)
			       '(face (:background "grey80"))))
	(pending-input #f)
	(pending-pos 0)
	(pending-len 0))

    (define (reader buf size)
      (with-error-handler emacs-protocol-error-handler
        (lambda ()
	  (if pending-input
	      (cond ((<= pending-len size)
		     (bytevec-set-subvector! buf 0 pending-len
					     pending-input pending-pos)
		     (set! pending-input #f)
		     pending-len)
		    (else
		     (bytevec-set-subvector! buf 0 size
					     pending-input pending-pos)
		     (set! pending-pos (+ pending-pos size))
		     (set! pending-len (- pending-len size))
		     size))
	      (let ((ev (get-event)))
		(if (equal? ev `(,input "RET"))
		    (let ((text (string-append (get-text input) "\n")))
		      (set-text input "")
		      (write-string text (string-length text) 
				    '(:inherit bold))
		      (set! pending-input (string-bytes text))
		      (set! pending-pos 0)
		      (set! pending-len (bytevec-length-8 pending-input)))
		    (handle-event ev))
		(reader buf size))))))

    (define (write-string str len props)
      (cond ((> len 0)
	     (if output-newline-pending
		 (append-text output "\n"))
	     (set! output-newline-pending
		   (eq? (string-ref str (1- len)) #\newline))
	     (append-text output
			  `(text ,(substring str 
					     0
					     (if output-newline-pending
						 (1- len)
						 len))
				 ,@props)))))

    (define (writer buf size)
      (with-error-handler emacs-protocol-error-handler
        (lambda ()
	  (write-string (create-string buf) size
			'(:foreground "blue")))))

    (define-key input "RET" (lambda () #f))
    (make-line-buffered-port 512 reader writer)))

(define (emacs-repl)
  (with-emacs-connection
   (lambda ()
     (let* ((buffer (create-buffer "*suo-repl*"))
	    (port   (make-segment-port buffer 0)))
       
       (show-buffer buffer)
       (call-p current-output-port port
	       (lambda ()
		 (call-p current-input-port port
			 (lambda ()
			   (generic-repl "")))))))))

(define (make-code-segment buffer pos)
  (let ((seg (create-segment buffer pos '(face nil
					  active-face (:background
						       "grey95")
					  mode code))))
    (define-key seg "C-c C-c"
      (lambda ()
	(write (/books/eval-string (get-text seg)))))

    seg))
