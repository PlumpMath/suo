@
*   Using Emacs as a display server

As an intermediate step towards connecting to a X server and doing all
user interaction using the X protocol, we connect to Emacs and speak a
specialized high-level UI protocol.

=
(directory /emacs)
(open /base /books)

-
(define pending-events '())

(define emacs-fd -1)
(define emacs-port #f)
(define emacs-protocol-error-handler #f)

(define (with-emacs-connection proc)
  (if emacs-port
      (sys:close emacs-fd))
  (set! emacs-fd (sys:connect "localhost" 7000))
  (if (< emacs-fd 0)
      (error "can't connect " (- emacs-fd)))
  (set! emacs-port (make-sys-port emacs-fd))
  (catch-protect
   (lambda (throw)
     (set! emacs-protocol-error-handler throw)
     (with-error-handler throw proc))
   (lambda ()
     (sys:close emacs-fd)
     (set! emacs-port #f))
   (lambda (msg rest)
     (apply error msg rest))))

-
(define (read-one)
  (let ((form (read emacs-port)))
    (if (eof-object? form)
	(error "server connection broken"))
    (cond ((and (pair? form) (eq? (car form) 'event))
	   (set! pending-events (append pending-events (list (cdr form))))
	   #f)
	  (else
	   form))))

(define (read-response)
  (or (read-one)
      (read-response)))

-
(define (do-request req)
  (call-p current-output-port emacs-port
	  (lambda ()
	    (call-p max-print-depth 200
		    (lambda ()
		      (write req)
		      (newline)))))
  (let ((res (read-response)))
    (if (and (pair? res) (eq? (car res) 'error))
	(error res)
	res)))

-

-
(define (get-event)
  (if (null? pending-events)
      (let ((res (read-one)))
	(if res
	    (begin
	      (display ";; unexpected response ")
	      (write res)
	      (newline)))
	(get-event))
      (let ((ev (car pending-events)))
	(set! pending-events (cdr pending-events))
	ev)))

(define event-handlers (make-hash-table 31))

(define (register-handler id tag handler)
  (hash-set! event-handlers (list id tag) handler))

(define (call-with-error-handling proc . args)
  (catch ((caught-error k args)
	  (set! last-error-continuation k)
	  (apply display-error args))
    (with-error-handler
     (lambda args
       (:call-cc (lambda (k)
		   (caught-error k args))))
     (lambda ()
       (apply proc args)))))

(define (handle-event ev)
  (pk ev)
  (let ((handler (hash-ref event-handlers ev)))
    (if handler
	(call-with-error-handling handler)
	(let ((handler (hash-ref event-handlers (car ev))))
	  (if handler
	      (call-with-error-handling handler (cadr ev)))))))

-
(define (destroy id)
  (do-request `(destroy ,id)))

(define (create-buffer name)
  (do-request `(create-buffer ,name)))

(define (show-buffer buffer)
  (do-request `(show-buffer ,buffer)))

(define (create-segment buffer pos props)
  (do-request `(create-segment ,buffer ,pos ,props)))

(define (remove-segment seg)
  (do-request `(remove-segment ,seg)))

(define (hide-segment seg)
  (do-request `(hide-segment ,seg)))

(define (show-segment seg)
  (do-request `(show-segment ,seg)))

(define (goto-segment seg)
  (do-request `(goto-segment ,seg)))

(define (set-text segment text)
  (do-request `(set-text ,segment ,text)))

(define (append-text segment text)
  (do-request `(append-text ,segment ,text)))

(define (set-dirty segment val)
  (do-request `(set-dirty ,segment ,(if val 't 'nil))))

(define (get-text segment)
  (do-request `(get-text ,segment)))

(define (get-text-if-dirty segment)
  (let ((r (do-request `(get-text-if-dirty ,segment))))
    (if (eq? r 'nil)
	#f
	r)))

(define (bind-key segment key handler)
  (do-request `(bind-key ,segment ,key))
  (register-handler segment key handler))

-
(define (make-segment-port buffer pos)
  (let ((output (create-segment buffer pos
				'(read-only t
 			          face (:background "grey90"))))
	(input (create-segment buffer (1+ pos)
			       '(face (:background "grey80")))))

    (letvar ((output-newline-pending #f)
	     (pending-input #f)
	     (pending-pos 0)
	     (pending-len 0))

      (define (reader buf size)
	(with-error-handler emacs-protocol-error-handler
	  (lambda ()
	    (if pending-input
		(cond ((<= pending-len size)
		       (bytevec-set-subvector! buf 0 pending-len
					       pending-input pending-pos)
		       (set! pending-input #f)
		       pending-len)
		      (else
		       (bytevec-set-subvector! buf 0 size
					       pending-input pending-pos)
		       (set! pending-pos (+ pending-pos size))
		       (set! pending-len (- pending-len size))
		       size))
		(let ((ev (get-event)))
		  (if (equal? ev `(,input "RET"))
		      (let ((text (string-append (get-text input) "\n")))
			(set-text input "")
			(write-string text (string-length text) 
				      '(:inherit bold))
			(set! pending-input (string-bytes text))
			(set! pending-pos 0)
			(set! pending-len (bytevec-length-8 pending-input)))
		      (handle-event ev))
		  (reader buf size))))))

      (define (write-string str len props)
	(cond ((> len 0)
	       (if output-newline-pending
		   (append-text output "\n"))
	       (set! output-newline-pending
		     (eq? (string-ref str (1- len)) #\newline))
	       (append-text output
			    `(text ,(substring str 
					       0
					       (if output-newline-pending
						   (1- len)
						   len))
				   ,@props)))))
      
      (define (writer buf size)
	(with-error-handler emacs-protocol-error-handler
          (lambda ()
	    (write-string (create-string buf) size
			  '(:foreground "blue")))))

      (bind-key input "RET" (lambda () #f))
      (make-line-buffered-port 512 reader writer))))

-
(define (eval-print form)
  (call-with-error-handling
   (lambda ()
     (call-v (lambda ()
	       (set-interrupt-handler interrupt-handler)
	       (eval form))
	     (lambda vals
	       (for-each (lambda (v)
			   (write v)
			   (newline))
			 vals))))))

-
(define (make-code-segment buffer pos port) 
  (let ((seg (create-segment buffer pos '(mode code 
					  active-face (:background "grey95")))))
    (bind-key seg "C-c C-c"
      (lambda args
	(call-p current-output-port port
		(lambda ()
		  (eval-print (cons 'begin
				    (/books/read-forms-from-string
				     (get-text seg))))))))

    seg))

-
(define (emacs-repl)
  (with-emacs-connection
   (lambda ()
     (let* ((buffer (create-buffer "*suo-repl*"))
	    (port   (make-segment-port buffer 0)))

       (make-code-segment buffer -1 port)

       (show-buffer buffer)
       (call-p current-output-port port
	       (lambda ()
		 (call-p current-input-port port
			 (lambda ()
			   (generic-repl "")))))))))

@
Books

-
(define-record book-buffer
  :prefix bb
  :slots (book buffer sss))

(define-record section-segment
  :prefix ss
  :slots (section segment (content-cache #f)))

-
(define (make-section-segment sec bb pos)
  (let ((seg (create-segment (bb-buffer bb) pos
			     `(mode ,(case (section-type sec)
				       ((code properties) 'code)
				       (else              'plain))
			       dirty-face         (:background "#fbffb6")
			       active-dirty-face  (:background "#e6eaa7")
			       active-face        (:background "grey95")))))
    (set-text seg (section-content sec))
    (set-dirty seg (section-dirty sec))

    (let ((ss (section-segment sec seg (section-content sec))))
      (bind-key seg "C-c C-o"
		(lambda ()
		  (open-new-section-segment bb ss)))
      (bind-key seg "C-c C-m"
		(lambda ()
		  (merge-section-segments bb ss)))
      ss)))

-
(define (insert-at-pos lst pos elt)
  (cond ((or (zero? pos)
	     (null? lst))
	 (cons elt lst))
	(else
	 (cons (car lst)
	       (insert-at-pos (cdr lst) (1- pos) elt)))))

-
(define (open-new-section-segment bb old-ss)
  (sync-book bb)
  (new-section (ss-section old-ss) 'code)
  (redisplay-book-buffer bb))

-
(define (merge-section-segments bb first-ss)
  (sync-book bb)
  (merge-sections (ss-section first-ss))
  (redisplay-book-buffer bb))

-
(define (sync-book bb)
  (for-each (lambda (ss)
	      (let ((text (get-text-if-dirty (ss-segment ss))))
		(cond (text
		       (set! (section-content (ss-section ss)) text)
		       (set! (section-dirty (ss-section ss)) #t)))))
	    (bb-sss bb)))
  
-
(define (sync-buffer bb)
  (for-each (lambda (ss)
	      (set-dirty (ss-segment ss)
			 (section-dirty (ss-section ss))))
	    (bb-sss bb)))
  
-
(define (recreate-buffer-segments bb)
  (for-each (lambda (ss)
	      (remove-segment (ss-segment ss)))
	    (bb-sss bb))
  (set! (bb-sss bb)
	(map (lambda (sec)
	       (make-section-segment sec bb -1))
	     (book-sections (bb-book bb)))))
	
-
(define (update-and-commit-book bb)
  (pk 'commit (book-archive-name (bb-book bb)))
  (sync-book bb)
  (commit-book (bb-book bb))
  (sync-buffer bb))

-
(define (make-book-buffer book)
  (let* ((bb (book-buffer book
			  (create-buffer
			   (string-append (book-archive-name book)
					  ".arch"))
			  '())))
    (recreate-buffer-segments bb)
    (bind-key (bb-buffer bb) "C-c C-c"
	      (lambda args
		(update-and-commit-book bb)))
    (bind-key (bb-buffer bb) "C-c C-l"
	      (lambda args
		(resync-book-buffer bb)))
    (show-buffer (bb-buffer bb))
    bb))

-
(define (resync-book-buffer bb)
  (pk 'resync (book-archive-name (bb-book bb)))
  (sync-book bb)
  (recreate-buffer-segments bb))

-
(define (search-deltas l1 l2 match?)
  (let loop-1 ((l1 l1)
	       (delta-1 0))
       (if (null? l1)
	   (values delta-1 (length l2))
	 (let loop-2 ((l2 l2)
		      (delta-2 0))
	      (cond ((null? l2)
		     (loop-1 (cdr l1) (1+ delta-1)))
		    ((match? (car l1) (car l2))
		     (values delta-1 delta-2))
		    (else
		     (loop-2 (cdr l2) (1+ delta-2))))))))
		
-
(define (redisplay-list l1 l2 match? update create remove)
  (let loop ((pos 0)
	     (l1 l1)
	     (l2 l2)
	     (new-l1 '()))
       (cond ((and (null? l1) (null? l2))
	      (reverse new-l1))
	     (else
	      (let-values1 (delta-l1 delta-l2 (search-deltas l1 l2 match?))
                (cond ((and (zero? delta-l1) (zero? delta-l2))
		       (update (car l1) (car l2))
		       (loop (1+ pos)
			     (cdr l1)
			     (cdr l2)
			     (cons (car l1) new-l1)))
		      (else
		       (for-each remove (list-head l1 delta-l1))
		       (loop (+ pos delta-l2)
			     (list-tail l1 delta-l1)
			     (list-tail l2 delta-l2)
			     (append (reverse
				      (map (lambda (e2 i)
					     (create e2 (+ pos i)))
					   (list-head l2 delta-l2)
					   (iota delta-l2)))
				     new-l1)))))))))

-
(define (redisplay-section-segment ss)
  (let ((sec (ss-section ss))
	(seg (ss-segment ss)))
    (if (not (eq? (ss-content-cache ss) (section-content sec)))
	(begin
	 (set-text seg (section-content sec))
	 (set! (ss-content-cache ss) (section-content sec))))
    (set-dirty seg (section-dirty sec))))

-
(define (redisplay-book-buffer bb)
  (set! (bb-sss bb)
	(redisplay-list (bb-sss bb) (book-sections (bb-book bb))
			(lambda (ss sec) ; match?
			  (eq? (ss-section ss) sec))
			(lambda (ss sec) ; update
			  (redisplay-section-segment ss))
			(lambda (sec pos) ; create
			  (make-section-segment sec bb pos))
			(lambda (ss)      ; remove
			  (remove-segment (ss-segment ss))))))

-
(define (redisplay-simulate l1 l2)
  (redisplay-list l1 l2 eq?
		  (lambda (e1 e2)
		    (pk '= e1 e2))
		  (lambda (e2 pos)
		    (pk '+ e2 pos)
		    e2)
		  (lambda (e1)
		    (pk '- e1))))
