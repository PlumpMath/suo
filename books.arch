@

*     Books, sections, and pages.

Books contain the bulk of the code in a Suo system, in a literate
programming kind of way that allows for interactive development.

A BOOK is a list of SECTIONs.  A section contains either text, code,
or properties.  The basic action performed with books is to modify one
or more of its sections and then to COMMIT the book.  (Additions,
removals, and rearrangement of sections will be dealt with later.)

Books themselves have no attributes beyond their list of sections.
The first property section, however, usually talks about the book.

You can not change the type of a section; once it has been created as
a text section, say, it will always stay a text section.

Text sections and code sections are very similar.  You could say that
text is code as well, just with a syntax that has been tuned for
typesetting.  (In fact, it is planned that the type-setting and code
syntaxes will be embeddedable into each other.)  Property sections are
used to define common parameters for all subsequent sections, such as
the current directory for defintions.

A section is either CLEAN or DIRTY.  A section can become dirty for a
number of reasons; the most typical one is that its contents has been
changed by the user.  Dirtying a properties section will make all its
following sections in the book dirty as well, and comitting a section
that contains a macro definition might at one day make all sections
that use that macro dirty.  Etc.

Comitting a book has the goal of making all its sections clean.  It
does this by committing each PART of the book, one after the other.  A
new part starts with a property section that contains a
'macro-barrier' property.  Parts are useful when a book contains macro
definitions that are used later on: when these macros are put in their
own part at the beginning of the book, they will already be
'installed' when later parts are processed.  (See below for why this
would otherwise not work.)

Comitting a part proceeds in three phases: DECLARING, COMPILING, and
INSTALLING.  First all dirty sections of the part are declared, in
order from start to end, then they are compiled, and finally they are
installed.  A section becomes clean when it has been installed.  The
process might stop at any point when errors are encountered.

Declaring a section consists of expanding its code enough to figure
out which top-level definitions it contains, and binding their names
to 'dummy' values, if the name doesn't have a suitable value already.
This will make sure that the compilation phase will encounter the
right kind of bindings, even for definitions that happen in later
sections.  Thus, this is the mechanism that allows you to define sets
of mutually recursive functions.  The install phase will later turn
the dummy value into the real value.

The dummy values are as follows: for a variable definition, a variable
object initialized to the unspecified value is used; for a function
definition, a function that signals an "undefined" error is used; for
a record type definition, a type with no slots; and for a macro
definition, a macro with a transformer that signals an "undefined"
error.

If a name has already a binding, but that binding is not compatible
with the new definition, an error is signaled.  Likewise, when a name
used to be defined by a section, and the new version does no longer
define it, but the name still has a binding, an error is signaled.  If
you want to change the type of a name or remove it from a section, you
need to explicitly remove the binding first.

Compiling a section consists of creating (and compiling) a function
that, when called, will execute the top-level forms of the section.
Installing a section will call this function.

The top-level definition forms will do the following: a variable
definition will set the (already existing from the declaration phase)
variable object to the initial value, but only when the variable value
is the unspecified value.  A function definition will
transmogrify-objects to change the existing function object into the
new one.  A record type definition will use record-type-transmogrify
to change the old record type into the new one.  A macro definition
will just bind the name to the new macro.


For bootstrapping, books can be exported to files in a format that the
bootstrap compiler can understand.  Each section starts with a header
line and ends at the next header line.  The header line determines the
kind of the section: property sections start with "=", text sections
with "@", and code sections with "-", respectively, on a line of their
own.  Books start with a header line of "#".

=
(directory /books)
(open /base)

-
(define-record book
  archive-name sections)

(define-record section
  book type content dirty errors installer)

-
(define (read-text-line)
  (let ((buf (make-string 256)))
    (let loop ((i 0))
      (let ((ch (input-char (current-input-port))))
	(cond ((eof-object? ch)
	       (if (zero? i)
		   ch
		   (substring buf 0 i)))
	      (else
	       (string-set! buf i ch)
	       (if (eq? ch #\newline)
		   (substring buf 0 (1+ i))
		   (loop (1+ i)))))))))

(define (read-nonblank-text-line)
  (let loop ()
    (let ((line (read-text-line)))
      (cond ((eof-object? line)
	     line)
	    ((or (zero? (string-length line))
		 (eq? (string-ref line 0) #\newline))
	     (loop))
	    (else
	     line)))))

(define (read-forms-from-string str)
  (let ((p (make-string-input-port str)))
    (let loop ((forms '()))
      (let ((f (read p)))
	(if (eof-object? f)
	    (reverse forms)
	    (loop (cons f forms)))))))

-
(define (read-book)

  (define (header-to-type l)
    (cond ((eof-object? l)
	   l)
	  ((equal? l "@\n")
	   'text)
	  ((equal? l "=\n")
	   'properties)
	  ((equal? l "-\n")
	   'code)
	  (else
	   #f)))

  (define (lines->content lines)
    ;; the section content does not include a final newline
       (let ((content (apply string-append lines)))
	 (if (and (> (string-length content) 0)
		  (eq? (string-ref content (1- (string-length content)))
		       #\newline))
	     (substring content 0 (1- (string-length content)))
	   content)))

  (let section-loop ((sections '())
		     (type (or (header-to-type (read-nonblank-text-line))
			       (error "section start not found"))))

    (cond ((eof-object? type)
	   (let ((b (book #f (reverse sections))))
	     (for-each (lambda (s)
			 (set! (section-book s) b))
		       sections)
	     b))
	  (else
	   (let content-loop ((lines '()))
	     (let* ((line (read-text-line))
		    (next-type (header-to-type line)))
	       (if next-type
		   (section-loop
		    (cons (section #f
				   type
				   (lines->content (reverse lines))
				   #t
				   #f
				   #f)
			  sections)
		    next-type)
		   (content-loop (cons line lines)))))))))

-
(define (write-book book)
  (for-each write-section (book-sections book)))

(define (write-section sec)
  (let ((header (case (section-type sec)
		  ((text)       "@\n")
		  ((properties) "=\n")
		  ((code)       "-\n")
		  (else         "?\n"))))
    (display header)
    (display (section-content sec))
    (newline)))

-
(define (retrieve-book name)
  (let ((book (call-with-open-archive name
	        (lambda (port)
		  (call-p current-input-port port read-book)))))
    (set! (book-archive-name book) name)
    book))

(define (archive-book book)
  (call-with-new-archive (book-archive-name book)
    (lambda (port)
      (call-p current-output-port port
        (lambda ()
	  (write-book book))))))

-
(define (insert-after lst old new)
  (cond ((null? lst)
	 (list new))
	((eq? (car lst) old)
	 (cons* old new (cdr lst)))
	(else
	 (cons (car lst)
	       (insert-after (cdr lst) old new)))))

(define (new-section prev-sec type)
  (let ((new (section (section-book prev-sec)
		      type
		      ""
		      #f
		      #f
		      #f)))
    (set! (book-sections (section-book prev-sec))
	  (insert-after (book-sections (section-book prev-sec))
			prev-sec
			new))
    new))

-
(define (merge-sections first-sec)
  (let* ((book (section-book first-sec))
	 (sections (book-sections book))
	 (second-sec (list-ref sections (1+ (list-index sections first-sec)))))
    (set! (section-content first-sec)
	  (string-append (section-content first-sec)
			 "\n"
			 (section-content second-sec)))
    (set! (book-sections book) (delq1 second-sec sections))))

-
(define (process-section sec proc)
  (catch ((caught-error msg rest)
	  (display-error msg rest)
	  (set! (section-errors sec) msg)
	  #f)
    (with-error-handler caught-error
      (lambda ()
	(proc sec)
	(set! (section-errors sec) #f)
	#t))))

(define (process-sections secs proc)
  (call-p current-directory (current-directory)
	  (lambda ()
	    (call-p open-directories (open-directories)
		    (lambda ()
		      (and-map (lambda (s)
				 (if (eq? (section-type s) 'properties)
				     (process-section s process-properties))
				 (process-section s proc))
			       secs))))))

(define (process-properties sec)
  (let* ((props (read-forms-from-string (section-content sec)))
	 (dir (assq-ref props 'directory))
	 (open-dirs (assq-ref props 'open)))
    (if dir (current-directory (car dir)))
    (if open-dirs (open-directories open-dirs))))

-
(define (section-toplevel-form sec)
  (cons ':begin (read-forms-from-string (section-content sec))))

-
;; XXX - this is only for bootstrapping and hopefully only used
;;       temporarily.

(define (eval-book b)
  (process-sections (book-sections b) eval-section))

(define (eval-section s)
  (if (eq? (section-type s) 'code)
      (eval (section-toplevel-form s)))
  (set! (section-dirty s) #f))

-
;; Comitting a book

(define (commit-book b)
  (archive-book b)
  (and-map commit-part (book-parts b)))

(define (book-parts b)
  ;; *cough *
  (list (book-sections b)))

(define (commit-part p)
  (and (process-sections p declare-section)
       (process-sections p compile-section)
       (process-sections p install-section)))

-
(define (declare-section s)
  (if (and (section-dirty s)
	   (eq? (section-type s) 'code))
      (declare-form (section-toplevel-form s))))

(define (compile-section s)
  (if (and (section-dirty s)
	   (eq? (section-type s) 'code))
      (set! (section-installer s)
	    (compile-form (section-toplevel-form s)))))

(define (install-section s)
  (if (and (section-dirty s)
	   (eq? (section-type s) 'code))
      ((section-installer s)))
  (set! (section-dirty s) #f))

-
(define (declare-form form)
  (let ((form (macroexpand form)))
    (if (pair? form)
	(case (car form)
	  ((:begin)
	   (for-each declare-form (cdr form)))
 	  ((:define)
	   (variable-declare (cadr form)))
 	  ((:define-function)
	   (function-declare (cadr form)))
 	  ((:define-record-type)
	   (record-type-declare (cadr form)))
 	  ((:define-macro)
	   (macro-declare (cadr form)))))))

-
(define (compile-form form)
  (letvar ((top-expressions '()))

    (define (top exp)
      (set! top-expressions (cons exp top-expressions)))
    
    (define (compile-sub-form form)
      (let ((form (compile form)))
	(if (pair? form)
	    (case (car form)
	      ((:begin)
	       (for-each compile-sub-form (cdr form)))
	      ((:define)
	       (pk 'compile (cadr form))
	       (let ((var (variable-lookup (cadr form))))
		 (top `(/base/variable-install ',var ,(caddr form)))))
	      ((:define-function)
	       (pk 'compile (cadr form))
	       (let ((old (function-lookup (cadr form)))
		     (new (compile (caddr form))))
		 (top `(/base/function-install ',old ,new))))
	      ((:define-record-type)
	       (pk 'compile (cadr form))
	       (let ((old (record-type-lookup (cadr form)))
		     (new (compile (caddr form))))
		 (top `(/base/record-type-install ',old ,new))))
	      ((:define-macro)
	       (pk 'compile (cadr form))
	       (let ((mac (macro-lookup (cadr form)))
		     (trans (compile (caddr form))))
		 (top `(/base/macro-install ',mac ,trans))))
	      (else
	       (top form)))
	    (pk 'useless form))))

    (compile-sub-form form)
    (let ((installer-exp (compile `(:lambda () ,@(reverse top-expressions)))))
      (or (and (pair? installer-exp)
	       (eq? (car installer-exp) ':quote))
	  (error "expected :quote": installer-exp))
      (cadr installer-exp))))
