(define (inspect obj)

  (define (prompt p)
    (display p)
    (let loop ((r (read-line)))
      (cond ((null? r)
	     (loop (read-line)))
	    (else
	     (car r)))))

  (define (describe-short obj)
    (call-p max-print-depth 3
	    (lambda ()
	      (call-p max-print-length 5
		      (lambda ()
			(write obj)
			(newline))))))
  
  (define (describe obj)
    (call-p max-print-depth 6
	    (lambda ()
	      (call-p max-print-length 20
		      (lambda () (write obj))))))

  (define (display-menu choices)
    (for-each (lambda (c i)
		(display i)
		(display " - ")
		(cond ((car c)
		       (display (car c))
		       (display ": ")))
		(describe-short (cdr c)))
	      (list-head choices 10) (iota 10))
    (cond ((> (length choices) 10)
	   (display "[ ")
	   (display (- (length choices) 10))
	   (display " more ]")
	   (newline))))

  (define (run-menu choices)
    (let ((r (prompt "# ")))
      (if (number? r)
	  (cond ((and (<= 0 r)
		      (< r (length choices)))
		 (cons 'go (cdr (list-ref choices r))))
		(else
		 (display "choice out of range")
		 (newline)
		 (run-menu choices)))
	  r)))

  (define (object-choices obj)
    (define (list->choices lst)
      (cond ((null? lst)
	     '())
	    ((pair? lst)
	     (cons (cons #f (car lst))
		   (list->choices (cdr lst))))
	    (else
	     (list (cons #f lst)))))
    (cond ((pair? obj)
	   (list->choices obj))
	  ((vector? obj)
	   (list->choices (vector->list obj)))
	  ((record? obj)
	   (cons (cons 'type (type-of-record obj))
		 (map (lambda (s)
			(cons (car s) ((slot-accessor (cdr s)) obj)))
		      (record-type-slots (type-of-record obj)))))
	  (else
	   '())))

  (define (display-head obj ctxt offset)
    (display ctxt)
    (display " of ")
    (describe obj)
    (cond ((> offset 0)
	   (display " [ +")
	   (display offset)
	   (display " ]")))
    (newline))

  (define (inspect-loop obj ctxt choices offset history)
    (display-head obj ctxt offset)
    (display-menu (list-tail choices offset))
    (let loop ()
      (let ((cmd (run-menu (list-tail choices offset))))
	(cond ((and (pair? cmd)
		    (eq? (car cmd) 'go))
	       (inspect-loop (cdr cmd)
			     'elements (object-choices (cdr cmd)) 0
			     (cons obj history)))
	      ((eq? cmd '?)
	       (display "What would I know?")
	       (newline)
	       (loop))
	      ((eq? cmd 'q)
	       (values))
	      ((eq? cmd 'h)
	       (inspect-loop obj
			     'history (object-choices history) 0
			     (cons obj history)))
	      ((eq? cmd 'b)
	       (inspect-loop (car history)
			     'elements (object-choices (car history)) 0
			     (cdr history)))
	      ((eq? cmd 'r)
	       (inspect-loop obj
			     'referrers (object-choices (find-referrers obj)) 0
			     (cons obj history)))
	      ((eq? cmd 'n)
	       (inspect-loop obj
			     ctxt choices (+ offset 10)
			     history))
	      ((eq? cmd 'p)
	       (inspect-loop obj
			     ctxt choices (max 0 (- offset 10))
			     history))
	      ((eq? cmd 'd)
	       (if (code? obj)
		   (pk '(discode obj))
		   (begin
		     (display "not code")
		     (newline)
		     (loop))))
	      (else
	       (display "huh?")
	       (newline)
	       (loop))))))

  (inspect-loop obj
		'elements (object-choices obj) 0
		'()))

(define (inspect obj)

  (define (prompt p)
    (display p)
    (let loop ((r (read-line)))
      (cond ((null? r)
	     (loop (read-line)))
	    (else
	     (car r)))))

  (define (describe-short obj)
    (call-p max-print-depth 3
	    (lambda ()
	      (call-p max-print-length 5
		      (lambda ()
			(write obj)
			(newline))))))
  
  (define (describe obj)
    (call-p max-print-depth 6
	    (lambda ()
	      (call-p max-print-length 20
		      (lambda () (write obj))))))

  (define (display-menu choices)
    (for-each (lambda (c i)
		(display i)
		(display " - ")
		(cond ((car c)
		       (display (car c))
		       (display ": ")))
		(describe-short (cdr c)))
	      (list-head choices 10) (iota 10))
    (cond ((> (length choices) 10)
	   (display "[ ")
	   (display (- (length choices) 10))
	   (display " more ]")
	   (newline))))

  (define (run-menu choices)
    (let ((r (prompt "# ")))
      (if (number? r)
	  (cond ((and (<= 0 r)
		      (< r (length choices)))
		 (cons 'go (cdr (list-ref choices r))))
		(else
		 (display "choice out of range")
		 (newline)
		 (run-menu choices)))
	  r)))

  (define (object-choices obj)
    (define (list->choices lst)
      (cond ((null? lst)
	     '())
	    ((pair? lst)
	     (cons (cons #f (car lst))
		   (list->choices (cdr lst))))
	    (else
	     (list (cons #f lst)))))
    (cond ((pair? obj)
	   (list->choices obj))
	  ((vector? obj)
	   (list->choices (vector->list obj)))
	  ((record? obj)
	   (cons (cons 'type (type-of-record obj))
		 (map (lambda (s)
			(cons (car s) ((slot-accessor (cdr s)) obj)))
		      (record-type-slots (type-of-record obj)))))
	  (else
	   '())))

  (define (display-head obj ctxt offset)
    (display ctxt)
    (display " of ")
    (describe obj)
    (cond ((> offset 0)
	   (display " [ +")
	   (display offset)
	   (display " ]")))
    (newline))

  (define (inspect-loop obj ctxt choices offset history)
    (display-head obj ctxt offset)
    (display-menu (list-tail choices offset))
    (let loop ()
      (let ((cmd (run-menu (list-tail choices offset))))
	(cond ((and (pair? cmd)
		    (eq? (car cmd) 'go))
	       (inspect-loop (cdr cmd)
			     'elements (object-choices (cdr cmd)) 0
			     (cons obj history)))
	      ((eq? cmd '?)
	       (display "What would I know?")
	       (newline)
	       (loop))
	      ((eq? cmd 'q)
	       (values))
	      ((eq? cmd 'h)
	       (inspect-loop obj
			     'history (object-choices history) 0
			     (cons obj history)))
	      ((eq? cmd 'b)
	       (inspect-loop (car history)
			     'elements (object-choices (car history)) 0
			     (cdr history)))
	      ((eq? cmd 'r)
	       (inspect-loop obj
			     'referrers (object-choices (find-referrers obj)) 0
			     (cons obj history)))
	      ((eq? cmd 'n)
	       (inspect-loop obj
			     ctxt choices (+ offset 10)
			     history))
	      ((eq? cmd 'p)
	       (inspect-loop obj
			     ctxt choices (max 0 (- offset 10))
			     history))
	      ((eq? cmd 'd)
	       (if (code? obj)
		   (pk '(discode obj))
		   (begin
		     (display "not code")
		     (newline)
		     (loop))))
	      (else
	       (display "huh?")
	       (newline)
	       (loop))))))

  (inspect-loop obj
		'elements (object-choices obj) 0
		'()))

(define (inspect obj)

  (define (prompt p)
    (display p)
    (let loop ((r (read-line)))
      (cond ((null? r)
	     (loop (read-line)))
	    (else
	     (car r)))))

  (define (describe-short obj)
    (call-p max-print-depth 3
	    (lambda ()
	      (call-p max-print-length 5
		      (lambda ()
			(write obj)
			(newline))))))
  
  (define (describe obj)
    (call-p max-print-depth 6
	    (lambda ()
	      (call-p max-print-length 20
		      (lambda () (write obj))))))

  (define (display-menu choices)
    (for-each (lambda (c i)
		(display i)
		(display " - ")
		(cond ((car c)
		       (display (car c))
		       (display ": ")))
		(describe-short (cdr c)))
	      (list-head choices 10) (iota 10))
    (cond ((> (length choices) 10)
	   (display "[ ")
	   (display (- (length choices) 10))
	   (display " more ]")
	   (newline))))

  (define (run-menu choices)
    (let ((r (prompt "# ")))
      (if (number? r)
	  (cond ((and (<= 0 r)
		      (< r (length choices)))
		 (cons 'go (cdr (list-ref choices r))))
		(else
		 (display "choice out of range")
		 (newline)
		 (run-menu choices)))
	  r)))

  (define (object-choices obj)
    (define (list->choices lst)
      (cond ((null? lst)
	     '())
	    ((pair? lst)
	     (cons (cons #f (car lst))
		   (list->choices (cdr lst))))
	    (else
	     (list (cons #f lst)))))
    (cond ((pair? obj)
	   (list->choices obj))
	  ((vector? obj)
	   (list->choices (vector->list obj)))
	  ((record? obj)
	   (cons (cons 'type (type-of-record obj))
		 (map (lambda (s)
			(cons (car s) ((slot-accessor (cdr s)) obj)))
		      (record-type-slots (type-of-record obj)))))
	  (else
	   '())))

  (define (display-head obj ctxt offset)
    (display ctxt)
    (display " of ")
    (describe obj)
    (cond ((> offset 0)
	   (display " [ +")
	   (display offset)
	   (display " ]")))
    (newline))

  (define (inspect-loop obj ctxt choices offset history)
    (display-head obj ctxt offset)
    (display-menu (list-tail choices offset))
    (let loop ()
      (let ((cmd (run-menu (list-tail choices offset))))
	(cond ((and (pair? cmd)
		    (eq? (car cmd) 'go))
	       (inspect-loop (cdr cmd)
			     'elements (object-choices (cdr cmd)) 0
			     (cons obj history)))
	      ((eq? cmd '?)
	       (display "What would I know?")
	       (newline)
	       (loop))
	      ((eq? cmd 'q)
	       (values))
	      ((eq? cmd 'h)
	       (inspect-loop obj
			     'history (object-choices history) 0
			     (cons obj history)))
	      ((eq? cmd 'b)
	       (inspect-loop (car history)
			     'elements (object-choices (car history)) 0
			     (cdr history)))
	      ((eq? cmd 'r)
	       (inspect-loop obj
			     'referrers (object-choices (find-referrers obj)) 0
			     (cons obj history)))
	      ((eq? cmd 'n)
	       (inspect-loop obj
			     ctxt choices (+ offset 10)
			     history))
	      ((eq? cmd 'p)
	       (inspect-loop obj
			     ctxt choices (max 0 (- offset 10))
			     history))
	      ((eq? cmd 'd)
	       (if (code? obj)
		   (pk '(discode obj))
		   (begin
		     (display "not code")
		     (newline)
		     (loop))))
	      (else
	       (display "huh?")
	       (newline)
	       (loop))))))

  (inspect-loop obj
		'elements (object-choices obj) 0
		'()))

(define (inspect obj)

  (define (prompt p)
    (display p)
    (let loop ((r (read-line)))
      (cond ((null? r)
	     (loop (read-line)))
	    (else
	     (car r)))))

  (define (describe-short obj)
    (call-p max-print-depth 3
	    (lambda ()
	      (call-p max-print-length 5
		      (lambda ()
			(write obj)
			(newline))))))
  
  (define (describe obj)
    (call-p max-print-depth 6
	    (lambda ()
	      (call-p max-print-length 20
		      (lambda () (write obj))))))

  (define (display-menu choices)
    (for-each (lambda (c i)
		(display i)
		(display " - ")
		(cond ((car c)
		       (display (car c))
		       (display ": ")))
		(describe-short (cdr c)))
	      (list-head choices 10) (iota 10))
    (cond ((> (length choices) 10)
	   (display "[ ")
	   (display (- (length choices) 10))
	   (display " more ]")
	   (newline))))

  (define (run-menu choices)
    (let ((r (prompt "# ")))
      (if (number? r)
	  (cond ((and (<= 0 r)
		      (< r (length choices)))
		 (cons 'go (cdr (list-ref choices r))))
		(else
		 (display "choice out of range")
		 (newline)
		 (run-menu choices)))
	  r)))

  (define (object-choices obj)
    (define (list->choices lst)
      (cond ((null? lst)
	     '())
	    ((pair? lst)
	     (cons (cons #f (car lst))
		   (list->choices (cdr lst))))
	    (else
	     (list (cons #f lst)))))
    (cond ((pair? obj)
	   (list->choices obj))
	  ((vector? obj)
	   (list->choices (vector->list obj)))
	  ((record? obj)
	   (cons (cons 'type (type-of-record obj))
		 (map (lambda (s)
			(cons (car s) ((slot-accessor (cdr s)) obj)))
		      (record-type-slots (type-of-record obj)))))
	  (else
	   '())))

  (define (display-head obj ctxt offset)
    (display ctxt)
    (display " of ")
    (describe obj)
    (cond ((> offset 0)
	   (display " [ +")
	   (display offset)
	   (display " ]")))
    (newline))

  (define (inspect-loop obj ctxt choices offset history)
    (display-head obj ctxt offset)
    (display-menu (list-tail choices offset))
    (let loop ()
      (let ((cmd (run-menu (list-tail choices offset))))
	(cond ((and (pair? cmd)
		    (eq? (car cmd) 'go))
	       (inspect-loop (cdr cmd)
			     'elements (object-choices (cdr cmd)) 0
			     (cons obj history)))
	      ((eq? cmd '?)
	       (display "What would I know?")
	       (newline)
	       (loop))
	      ((eq? cmd 'q)
	       (values))
	      ((eq? cmd 'h)
	       (inspect-loop obj
			     'history (object-choices history) 0
			     (cons obj history)))
	      ((eq? cmd 'b)
	       (inspect-loop (car history)
			     'elements (object-choices (car history)) 0
			     (cdr history)))
	      ((eq? cmd 'r)
	       (inspect-loop obj
			     'referrers (object-choices (find-referrers obj)) 0
			     (cons obj history)))
	      ((eq? cmd 'n)
	       (inspect-loop obj
			     ctxt choices (+ offset 10)
			     history))
	      ((eq? cmd 'p)
	       (inspect-loop obj
			     ctxt choices (max 0 (- offset 10))
			     history))
	      ((eq? cmd 'd)
	       (if (code? obj)
		   (pk '(discode obj))
		   (begin
		     (display "not code")
		     (newline)
		     (loop))))
	      (else
	       (display "huh?")
	       (newline)
	       (loop))))))

  (inspect-loop obj
		'elements (object-choices obj) 0
		'()))

(define (inspect obj)

  (define (prompt p)
    (display p)
    (let loop ((r (read-line)))
      (cond ((null? r)
	     (loop (read-line)))
	    (else
	     (car r)))))

  (define (describe-short obj)
    (call-p max-print-depth 3
	    (lambda ()
	      (call-p max-print-length 5
		      (lambda ()
			(write obj)
			(newline))))))
  
  (define (describe obj)
    (call-p max-print-depth 6
	    (lambda ()
	      (call-p max-print-length 20
		      (lambda () (write obj))))))

  (define (display-menu choices)
    (for-each (lambda (c i)
		(display i)
		(display " - ")
		(cond ((car c)
		       (display (car c))
		       (display ": ")))
		(describe-short (cdr c)))
	      (list-head choices 10) (iota 10))
    (cond ((> (length choices) 10)
	   (display "[ ")
	   (display (- (length choices) 10))
	   (display " more ]")
	   (newline))))

  (define (run-menu choices)
    (let ((r (prompt "# ")))
      (if (number? r)
	  (cond ((and (<= 0 r)
		      (< r (length choices)))
		 (cons 'go (cdr (list-ref choices r))))
		(else
		 (display "choice out of range")
		 (newline)
		 (run-menu choices)))
	  r)))

  (define (object-choices obj)
    (define (list->choices lst)
      (cond ((null? lst)
	     '())
	    ((pair? lst)
	     (cons (cons #f (car lst))
		   (list->choices (cdr lst))))
	    (else
	     (list (cons #f lst)))))
    (cond ((pair? obj)
	   (list->choices obj))
	  ((vector? obj)
	   (list->choices (vector->list obj)))
	  ((record? obj)
	   (cons (cons 'type (type-of-record obj))
		 (map (lambda (s)
			(cons (car s) ((slot-accessor (cdr s)) obj)))
		      (record-type-slots (type-of-record obj)))))
	  (else
	   '())))

  (define (display-head obj ctxt offset)
    (display ctxt)
    (display " of ")
    (describe obj)
    (cond ((> offset 0)
	   (display " [ +")
	   (display offset)
	   (display " ]")))
    (newline))

  (define (inspect-loop obj ctxt choices offset history)
    (display-head obj ctxt offset)
    (display-menu (list-tail choices offset))
    (let loop ()
      (let ((cmd (run-menu (list-tail choices offset))))
	(cond ((and (pair? cmd)
		    (eq? (car cmd) 'go))
	       (inspect-loop (cdr cmd)
			     'elements (object-choices (cdr cmd)) 0
			     (cons obj history)))
	      ((eq? cmd '?)
	       (display "What would I know?")
	       (newline)
	       (loop))
	      ((eq? cmd 'q)
	       (values))
	      ((eq? cmd 'h)
	       (inspect-loop obj
			     'history (object-choices history) 0
			     (cons obj history)))
	      ((eq? cmd 'b)
	       (inspect-loop (car history)
			     'elements (object-choices (car history)) 0
			     (cdr history)))
	      ((eq? cmd 'r)
	       (inspect-loop obj
			     'referrers (object-choices (find-referrers obj)) 0
			     (cons obj history)))
	      ((eq? cmd 'n)
	       (inspect-loop obj
			     ctxt choices (+ offset 10)
			     history))
	      ((eq? cmd 'p)
	       (inspect-loop obj
			     ctxt choices (max 0 (- offset 10))
			     history))
	      ((eq? cmd 'd)
	       (if (code? obj)
		   (pk '(discode obj))
		   (begin
		     (display "not code")
		     (newline)
		     (loop))))
	      (else
	       (display "huh?")
	       (newline)
	       (loop))))))

  (inspect-loop obj
		'elements (object-choices obj) 0
		'()))

(define (inspect obj)

  (define (prompt p)
    (display p)
    (let loop ((r (read-line)))
      (cond ((null? r)
	     (loop (read-line)))
	    (else
	     (car r)))))

  (define (describe-short obj)
    (call-p max-print-depth 3
	    (lambda ()
	      (call-p max-print-length 5
		      (lambda ()
			(write obj)
			(newline))))))
  
  (define (describe obj)
    (call-p max-print-depth 6
	    (lambda ()
	      (call-p max-print-length 20
		      (lambda () (write obj))))))

  (define (display-menu choices)
    (for-each (lambda (c i)
		(display i)
		(display " - ")
		(cond ((car c)
		       (display (car c))
		       (display ": ")))
		(describe-short (cdr c)))
	      (list-head choices 10) (iota 10))
    (cond ((> (length choices) 10)
	   (display "[ ")
	   (display (- (length choices) 10))
	   (display " more ]")
	   (newline))))

  (define (run-menu choices)
    (let ((r (prompt "# ")))
      (if (number? r)
	  (cond ((and (<= 0 r)
		      (< r (length choices)))
		 (cons 'go (cdr (list-ref choices r))))
		(else
		 (display "choice out of range")
		 (newline)
		 (run-menu choices)))
	  r)))

  (define (object-choices obj)
    (define (list->choices lst)
      (cond ((null? lst)
	     '())
	    ((pair? lst)
	     (cons (cons #f (car lst))
		   (list->choices (cdr lst))))
	    (else
	     (list (cons #f lst)))))
    (cond ((pair? obj)
	   (list->choices obj))
	  ((vector? obj)
	   (list->choices (vector->list obj)))
	  ((record? obj)
	   (cons (cons 'type (type-of-record obj))
		 (map (lambda (s)
			(cons (car s) ((slot-accessor (cdr s)) obj)))
		      (record-type-slots (type-of-record obj)))))
	  (else
	   '())))

  (define (display-head obj ctxt offset)
    (display ctxt)
    (display " of ")
    (describe obj)
    (cond ((> offset 0)
	   (display " [ +")
	   (display offset)
	   (display " ]")))
    (newline))

  (define (inspect-loop obj ctxt choices offset history)
    (display-head obj ctxt offset)
    (display-menu (list-tail choices offset))
    (let loop ()
      (let ((cmd (run-menu (list-tail choices offset))))
	(cond ((and (pair? cmd)
		    (eq? (car cmd) 'go))
	       (inspect-loop (cdr cmd)
			     'elements (object-choices (cdr cmd)) 0
			     (cons obj history)))
	      ((eq? cmd '?)
	       (display "What would I know?")
	       (newline)
	       (loop))
	      ((eq? cmd 'q)
	       (values))
	      ((eq? cmd 'h)
	       (inspect-loop obj
			     'history (object-choices history) 0
			     (cons obj history)))
	      ((eq? cmd 'b)
	       (inspect-loop (car history)
			     'elements (object-choices (car history)) 0
			     (cdr history)))
	      ((eq? cmd 'r)
	       (inspect-loop obj
			     'referrers (object-choices (find-referrers obj)) 0
			     (cons obj history)))
	      ((eq? cmd 'n)
	       (inspect-loop obj
			     ctxt choices (+ offset 10)
			     history))
	      ((eq? cmd 'p)
	       (inspect-loop obj
			     ctxt choices (max 0 (- offset 10))
			     history))
	      ((eq? cmd 'd)
	       (if (code? obj)
		   (pk '(discode obj))
		   (begin
		     (display "not code")
		     (newline)
		     (loop))))
	      (else
	       (display "huh?")
	       (newline)
	       (loop))))))

  (inspect-loop obj
		'elements (object-choices obj) 0
		'()))

(define (inspect obj)

  (define (prompt p)
    (display p)
    (let loop ((r (read-line)))
      (cond ((null? r)
	     (loop (read-line)))
	    (else
	     (car r)))))

  (define (describe-short obj)
    (call-p max-print-depth 3
	    (lambda ()
	      (call-p max-print-length 5
		      (lambda ()
			(write obj)
			(newline))))))
  
  (define (describe obj)
    (call-p max-print-depth 6
	    (lambda ()
	      (call-p max-print-length 20
		      (lambda () (write obj))))))

  (define (display-menu choices)
    (for-each (lambda (c i)
		(display i)
		(display " - ")
		(cond ((car c)
		       (display (car c))
		       (display ": ")))
		(describe-short (cdr c)))
	      (list-head choices 10) (iota 10))
    (cond ((> (length choices) 10)
	   (display "[ ")
	   (display (- (length choices) 10))
	   (display " more ]")
	   (newline))))

  (define (run-menu choices)
    (let ((r (prompt "# ")))
      (if (number? r)
	  (cond ((and (<= 0 r)
		      (< r (length choices)))
		 (cons 'go (cdr (list-ref choices r))))
		(else
		 (display "choice out of range")
		 (newline)
		 (run-menu choices)))
	  r)))

  (define (object-choices obj)
    (define (list->choices lst)
      (cond ((null? lst)
	     '())
	    ((pair? lst)
	     (cons (cons #f (car lst))
		   (list->choices (cdr lst))))
	    (else
	     (list (cons #f lst)))))
    (cond ((pair? obj)
	   (list->choices obj))
	  ((vector? obj)
	   (list->choices (vector->list obj)))
	  ((record? obj)
	   (cons (cons 'type (type-of-record obj))
		 (map (lambda (s)
			(cons (car s) ((slot-accessor (cdr s)) obj)))
		      (record-type-slots (type-of-record obj)))))
	  (else
	   '())))

  (define (display-head obj ctxt offset)
    (display ctxt)
    (display " of ")
    (describe obj)
    (cond ((> offset 0)
	   (display " [ +")
	   (display offset)
	   (display " ]")))
    (newline))

  (define (inspect-loop obj ctxt choices offset history)
    (display-head obj ctxt offset)
    (display-menu (list-tail choices offset))
    (let loop ()
      (let ((cmd (run-menu (list-tail choices offset))))
	(cond ((and (pair? cmd)
		    (eq? (car cmd) 'go))
	       (inspect-loop (cdr cmd)
			     'elements (object-choices (cdr cmd)) 0
			     (cons obj history)))
	      ((eq? cmd '?)
	       (display "What would I know?")
	       (newline)
	       (loop))
	      ((eq? cmd 'q)
	       (values))
	      ((eq? cmd 'h)
	       (inspect-loop obj
			     'history (object-choices history) 0
			     (cons obj history)))
	      ((eq? cmd 'b)
	       (inspect-loop (car history)
			     'elements (object-choices (car history)) 0
			     (cdr history)))
	      ((eq? cmd 'r)
	       (inspect-loop obj
			     'referrers (object-choices (find-referrers obj)) 0
			     (cons obj history)))
	      ((eq? cmd 'n)
	       (inspect-loop obj
			     ctxt choices (+ offset 10)
			     history))
	      ((eq? cmd 'p)
	       (inspect-loop obj
			     ctxt choices (max 0 (- offset 10))
			     history))
	      ((eq? cmd 'd)
	       (if (code? obj)
		   (pk '(discode obj))
		   (begin
		     (display "not code")
		     (newline)
		     (loop))))
	      (else
	       (display "huh?")
	       (newline)
	       (loop))))))

  (inspect-loop obj
		'elements (object-choices obj) 0
		'()))

(define (inspect obj)

  (define (prompt p)
    (display p)
    (let loop ((r (read-line)))
      (cond ((null? r)
	     (loop (read-line)))
	    (else
	     (car r)))))

  (define (describe-short obj)
    (call-p max-print-depth 3
	    (lambda ()
	      (call-p max-print-length 5
		      (lambda ()
			(write obj)
			(newline))))))
  
  (define (describe obj)
    (call-p max-print-depth 6
	    (lambda ()
	      (call-p max-print-length 20
		      (lambda () (write obj))))))

  (define (display-menu choices)
    (for-each (lambda (c i)
		(display i)
		(display " - ")
		(cond ((car c)
		       (display (car c))
		       (display ": ")))
		(describe-short (cdr c)))
	      (list-head choices 10) (iota 10))
    (cond ((> (length choices) 10)
	   (display "[ ")
	   (display (- (length choices) 10))
	   (display " more ]")
	   (newline))))

  (define (run-menu choices)
    (let ((r (prompt "# ")))
      (if (number? r)
	  (cond ((and (<= 0 r)
		      (< r (length choices)))
		 (cons 'go (cdr (list-ref choices r))))
		(else
		 (display "choice out of range")
		 (newline)
		 (run-menu choices)))
	  r)))

  (define (object-choices obj)
    (define (list->choices lst)
      (cond ((null? lst)
	     '())
	    ((pair? lst)
	     (cons (cons #f (car lst))
		   (list->choices (cdr lst))))
	    (else
	     (list (cons #f lst)))))
    (cond ((pair? obj)
	   (list->choices obj))
	  ((vector? obj)
	   (list->choices (vector->list obj)))
	  ((record? obj)
	   (cons (cons 'type (type-of-record obj))
		 (map (lambda (s)
			(cons (car s) ((slot-accessor (cdr s)) obj)))
		      (record-type-slots (type-of-record obj)))))
	  (else
	   '())))

  (define (display-head obj ctxt offset)
    (display ctxt)
    (display " of ")
    (describe obj)
    (cond ((> offset 0)
	   (display " [ +")
	   (display offset)
	   (display " ]")))
    (newline))

  (define (inspect-loop obj ctxt choices offset history)
    (display-head obj ctxt offset)
    (display-menu (list-tail choices offset))
    (let loop ()
      (let ((cmd (run-menu (list-tail choices offset))))
	(cond ((and (pair? cmd)
		    (eq? (car cmd) 'go))
	       (inspect-loop (cdr cmd)
			     'elements (object-choices (cdr cmd)) 0
			     (cons obj history)))
	      ((eq? cmd '?)
	       (display "What would I know?")
	       (newline)
	       (loop))
	      ((eq? cmd 'q)
	       (values))
	      ((eq? cmd 'h)
	       (inspect-loop obj
			     'history (object-choices history) 0
			     (cons obj history)))
	      ((eq? cmd 'b)
	       (inspect-loop (car history)
			     'elements (object-choices (car history)) 0
			     (cdr history)))
	      ((eq? cmd 'r)
	       (inspect-loop obj
			     'referrers (object-choices (find-referrers obj)) 0
			     (cons obj history)))
	      ((eq? cmd 'n)
	       (inspect-loop obj
			     ctxt choices (+ offset 10)
			     history))
	      ((eq? cmd 'p)
	       (inspect-loop obj
			     ctxt choices (max 0 (- offset 10))
			     history))
	      ((eq? cmd 'd)
	       (if (code? obj)
		   (pk '(discode obj))
		   (begin
		     (display "not code")
		     (newline)
		     (loop))))
	      (else
	       (display "huh?")
	       (newline)
	       (loop))))))

  (inspect-loop obj
		'elements (object-choices obj) 0
		'()))
